; ModuleID = 'blackscholes.c'
source_filename = "blackscholes.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.OptionData_ = type { float, float, float, float, float, float, i8, float, float }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@numError = global i32 0, align 4
@numOptions = common global i32 0, align 4
@nThreads = common global i32 0, align 4
@sptprice = common global float* null, align 8
@strike = common global float* null, align 8
@rate = common global float* null, align 8
@volatility = common global float* null, align 8
@otime = common global float* null, align 8
@otype = common global i32* null, align 8
@prices = common global float* null, align 8
@.str = private unnamed_addr constant [24 x i8] c"PARSEC Benchmark Suite\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"Usage:\0A\09%s <nthreads> <inputFile> <outputFile>\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"ERROR: Unable to open file `%s'.\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%i\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"ERROR: Unable to read from file `%s'.\0A\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"WARNING: Not enough work, reducing number of threads to match number of options.\0A\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"Error: <nthreads> must be 1 (serial version)\0A\00", align 1
@data = common global %struct.OptionData_* null, align 8
@.str.8 = private unnamed_addr constant [27 x i8] c"%f %f %f %f %f %f %c %f %f\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"ERROR: Unable to close file `%s'.\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"Num of Options: %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"Num of Runs: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"Size of data: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"%i\0A\00", align 1
@.str.15 = private unnamed_addr constant [38 x i8] c"ERROR: Unable to write to file `%s'.\0A\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"%.18f\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define float @CNDF(float) #0 {
  %2 = alloca float, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  store float %0, float* %2, align 4
  %17 = load float, float* %2, align 4
  %18 = fpext float %17 to double
  %19 = fcmp olt double %18, 0.000000e+00
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %1
  %21 = load float, float* %2, align 4
  %22 = fsub float -0.000000e+00, %21
  store float %22, float* %2, align 4
  store i32 1, i32* %3, align 4
  br label %24

; <label>:23:                                     ; preds = %1
  store i32 0, i32* %3, align 4
  br label %24

; <label>:24:                                     ; preds = %23, %20
  %25 = load float, float* %2, align 4
  store float %25, float* %5, align 4
  %26 = load float, float* %2, align 4
  %27 = fmul float -5.000000e-01, %26
  %28 = load float, float* %2, align 4
  %29 = fmul float %27, %28
  %30 = fpext float %29 to double
  %31 = call double @exp(double %30) #5
  %32 = fptrunc double %31 to float
  store float %32, float* %7, align 4
  %33 = load float, float* %7, align 4
  store float %33, float* %6, align 4
  %34 = load float, float* %6, align 4
  %35 = fpext float %34 to double
  %36 = fmul double %35, 0x3FD9884533D43651
  %37 = fptrunc double %36 to float
  store float %37, float* %6, align 4
  %38 = load float, float* %5, align 4
  %39 = fpext float %38 to double
  %40 = fmul double 0x3FCDA6711871100E, %39
  %41 = fptrunc double %40 to float
  store float %41, float* %8, align 4
  %42 = load float, float* %8, align 4
  %43 = fpext float %42 to double
  %44 = fadd double 1.000000e+00, %43
  %45 = fptrunc double %44 to float
  store float %45, float* %8, align 4
  %46 = load float, float* %8, align 4
  %47 = fpext float %46 to double
  %48 = fdiv double 1.000000e+00, %47
  %49 = fptrunc double %48 to float
  store float %49, float* %8, align 4
  %50 = load float, float* %8, align 4
  %51 = load float, float* %8, align 4
  %52 = fmul float %50, %51
  store float %52, float* %9, align 4
  %53 = load float, float* %9, align 4
  %54 = load float, float* %8, align 4
  %55 = fmul float %53, %54
  store float %55, float* %10, align 4
  %56 = load float, float* %10, align 4
  %57 = load float, float* %8, align 4
  %58 = fmul float %56, %57
  store float %58, float* %11, align 4
  %59 = load float, float* %11, align 4
  %60 = load float, float* %8, align 4
  %61 = fmul float %59, %60
  store float %61, float* %12, align 4
  %62 = load float, float* %8, align 4
  %63 = fpext float %62 to double
  %64 = fmul double %63, 0x3FD470BF3A92F8EC
  %65 = fptrunc double %64 to float
  store float %65, float* %14, align 4
  %66 = load float, float* %9, align 4
  %67 = fpext float %66 to double
  %68 = fmul double %67, 0xBFD6D1F0E5A8325B
  %69 = fptrunc double %68 to float
  store float %69, float* %15, align 4
  %70 = load float, float* %10, align 4
  %71 = fpext float %70 to double
  %72 = fmul double %71, 0x3FFC80EF025F5E68
  %73 = fptrunc double %72 to float
  store float %73, float* %16, align 4
  %74 = load float, float* %15, align 4
  %75 = load float, float* %16, align 4
  %76 = fadd float %74, %75
  store float %76, float* %15, align 4
  %77 = load float, float* %11, align 4
  %78 = fpext float %77 to double
  %79 = fmul double %78, 0xBFFD23DD4EF278D0
  %80 = fptrunc double %79 to float
  store float %80, float* %16, align 4
  %81 = load float, float* %15, align 4
  %82 = load float, float* %16, align 4
  %83 = fadd float %81, %82
  store float %83, float* %15, align 4
  %84 = load float, float* %12, align 4
  %85 = fpext float %84 to double
  %86 = fmul double %85, 0x3FF548CDD6F42943
  %87 = fptrunc double %86 to float
  store float %87, float* %16, align 4
  %88 = load float, float* %15, align 4
  %89 = load float, float* %16, align 4
  %90 = fadd float %88, %89
  store float %90, float* %15, align 4
  %91 = load float, float* %15, align 4
  %92 = load float, float* %14, align 4
  %93 = fadd float %91, %92
  store float %93, float* %14, align 4
  %94 = load float, float* %14, align 4
  %95 = load float, float* %6, align 4
  %96 = fmul float %94, %95
  store float %96, float* %13, align 4
  %97 = load float, float* %13, align 4
  %98 = fpext float %97 to double
  %99 = fsub double 1.000000e+00, %98
  %100 = fptrunc double %99 to float
  store float %100, float* %13, align 4
  %101 = load float, float* %13, align 4
  store float %101, float* %4, align 4
  %102 = load i32, i32* %3, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %109

; <label>:104:                                    ; preds = %24
  %105 = load float, float* %4, align 4
  %106 = fpext float %105 to double
  %107 = fsub double 1.000000e+00, %106
  %108 = fptrunc double %107 to float
  store float %108, float* %4, align 4
  br label %109

; <label>:109:                                    ; preds = %104, %24
  %110 = load float, float* %4, align 4
  ret float %110
}

; Function Attrs: nounwind
declare double @exp(double) #1

; Function Attrs: noinline nounwind optnone uwtable
define float @BlkSchlsEqEuroNoDiv(float, float, float, float, float, i32, float) #0 {
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca i32, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca float, align 4
  %32 = alloca float, align 4
  %33 = alloca float, align 4
  %34 = alloca float, align 4
  store float %0, float* %8, align 4
  store float %1, float* %9, align 4
  store float %2, float* %10, align 4
  store float %3, float* %11, align 4
  store float %4, float* %12, align 4
  store i32 %5, i32* %13, align 4
  store float %6, float* %14, align 4
  %35 = load float, float* %8, align 4
  store float %35, float* %16, align 4
  %36 = load float, float* %9, align 4
  store float %36, float* %17, align 4
  %37 = load float, float* %10, align 4
  store float %37, float* %18, align 4
  %38 = load float, float* %11, align 4
  store float %38, float* %19, align 4
  %39 = load float, float* %12, align 4
  store float %39, float* %20, align 4
  %40 = load float, float* %20, align 4
  %41 = fpext float %40 to double
  %42 = call double @sqrt(double %41) #5
  %43 = fptrunc double %42 to float
  store float %43, float* %21, align 4
  %44 = load float, float* %8, align 4
  %45 = load float, float* %9, align 4
  %46 = fdiv float %44, %45
  %47 = fpext float %46 to double
  %48 = call double @log(double %47) #5
  %49 = fptrunc double %48 to float
  store float %49, float* %22, align 4
  %50 = load float, float* %22, align 4
  store float %50, float* %23, align 4
  %51 = load float, float* %19, align 4
  %52 = load float, float* %19, align 4
  %53 = fmul float %51, %52
  store float %53, float* %26, align 4
  %54 = load float, float* %26, align 4
  %55 = fpext float %54 to double
  %56 = fmul double %55, 5.000000e-01
  %57 = fptrunc double %56 to float
  store float %57, float* %26, align 4
  %58 = load float, float* %18, align 4
  %59 = load float, float* %26, align 4
  %60 = fadd float %58, %59
  store float %60, float* %24, align 4
  %61 = load float, float* %24, align 4
  %62 = load float, float* %20, align 4
  %63 = fmul float %61, %62
  store float %63, float* %24, align 4
  %64 = load float, float* %24, align 4
  %65 = load float, float* %23, align 4
  %66 = fadd float %64, %65
  store float %66, float* %24, align 4
  %67 = load float, float* %19, align 4
  %68 = load float, float* %21, align 4
  %69 = fmul float %67, %68
  store float %69, float* %27, align 4
  %70 = load float, float* %24, align 4
  %71 = load float, float* %27, align 4
  %72 = fdiv float %70, %71
  store float %72, float* %24, align 4
  %73 = load float, float* %24, align 4
  %74 = load float, float* %27, align 4
  %75 = fsub float %73, %74
  store float %75, float* %25, align 4
  %76 = load float, float* %24, align 4
  store float %76, float* %28, align 4
  %77 = load float, float* %25, align 4
  store float %77, float* %29, align 4
  %78 = load float, float* %28, align 4
  %79 = call float @CNDF(float %78)
  store float %79, float* %31, align 4
  %80 = load float, float* %29, align 4
  %81 = call float @CNDF(float %80)
  store float %81, float* %32, align 4
  %82 = load float, float* %9, align 4
  %83 = fpext float %82 to double
  %84 = load float, float* %10, align 4
  %85 = fsub float -0.000000e+00, %84
  %86 = load float, float* %12, align 4
  %87 = fmul float %85, %86
  %88 = fpext float %87 to double
  %89 = call double @exp(double %88) #5
  %90 = fmul double %83, %89
  %91 = fptrunc double %90 to float
  store float %91, float* %30, align 4
  %92 = load i32, i32* %13, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %102

; <label>:94:                                     ; preds = %7
  %95 = load float, float* %8, align 4
  %96 = load float, float* %31, align 4
  %97 = fmul float %95, %96
  %98 = load float, float* %30, align 4
  %99 = load float, float* %32, align 4
  %100 = fmul float %98, %99
  %101 = fsub float %97, %100
  store float %101, float* %15, align 4
  br label %118

; <label>:102:                                    ; preds = %7
  %103 = load float, float* %31, align 4
  %104 = fpext float %103 to double
  %105 = fsub double 1.000000e+00, %104
  %106 = fptrunc double %105 to float
  store float %106, float* %33, align 4
  %107 = load float, float* %32, align 4
  %108 = fpext float %107 to double
  %109 = fsub double 1.000000e+00, %108
  %110 = fptrunc double %109 to float
  store float %110, float* %34, align 4
  %111 = load float, float* %30, align 4
  %112 = load float, float* %34, align 4
  %113 = fmul float %111, %112
  %114 = load float, float* %8, align 4
  %115 = load float, float* %33, align 4
  %116 = fmul float %114, %115
  %117 = fsub float %113, %116
  store float %117, float* %15, align 4
  br label %118

; <label>:118:                                    ; preds = %102, %94
  %119 = load float, float* %15, align 4
  ret float %119
}

; Function Attrs: nounwind
declare double @sqrt(double) #1

; Function Attrs: nounwind
declare double @log(double) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @bs_thread(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %10 = load i8*, i8** %2, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %7, align 4
  %13 = load i32, i32* %7, align 4
  %14 = load i32, i32* @numOptions, align 4
  %15 = load i32, i32* @nThreads, align 4
  %16 = sdiv i32 %14, %15
  %17 = mul nsw i32 %13, %16
  store i32 %17, i32* %8, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* @numOptions, align 4
  %20 = load i32, i32* @nThreads, align 4
  %21 = sdiv i32 %19, %20
  %22 = add nsw i32 %18, %21
  store i32 %22, i32* %9, align 4
  store i32 0, i32* %4, align 4
  br label %23

; <label>:23:                                     ; preds = %73, %1
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 100
  br i1 %25, label %26, label %76

; <label>:26:                                     ; preds = %23
  %27 = load i32, i32* %8, align 4
  store i32 %27, i32* %3, align 4
  br label %28

; <label>:28:                                     ; preds = %69, %26
  %29 = load i32, i32* %3, align 4
  %30 = load i32, i32* %9, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %72

; <label>:32:                                     ; preds = %28
  %33 = load float*, float** @sptprice, align 8
  %34 = load i32, i32* %3, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %33, i64 %35
  %37 = load float, float* %36, align 4
  %38 = load float*, float** @strike, align 8
  %39 = load i32, i32* %3, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %38, i64 %40
  %42 = load float, float* %41, align 4
  %43 = load float*, float** @rate, align 8
  %44 = load i32, i32* %3, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %43, i64 %45
  %47 = load float, float* %46, align 4
  %48 = load float*, float** @volatility, align 8
  %49 = load i32, i32* %3, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %48, i64 %50
  %52 = load float, float* %51, align 4
  %53 = load float*, float** @otime, align 8
  %54 = load i32, i32* %3, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %53, i64 %55
  %57 = load float, float* %56, align 4
  %58 = load i32*, i32** @otype, align 8
  %59 = load i32, i32* %3, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %58, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = call float @BlkSchlsEqEuroNoDiv(float %37, float %42, float %47, float %52, float %57, i32 %62, float 0.000000e+00)
  store float %63, float* %5, align 4
  %64 = load float, float* %5, align 4
  %65 = load float*, float** @prices, align 8
  %66 = load i32, i32* %3, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %65, i64 %67
  store float %64, float* %68, align 4
  br label %69

; <label>:69:                                     ; preds = %32
  %70 = load i32, i32* %3, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %3, align 4
  br label %28

; <label>:72:                                     ; preds = %28
  br label %73

; <label>:73:                                     ; preds = %72
  %74 = load i32, i32* %4, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %4, align 4
  br label %23

; <label>:76:                                     ; preds = %23
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  %16 = call i32 @fflush(%struct._IO_FILE* null)
  %17 = load i32, i32* %4, align 4
  %18 = icmp ne i32 %17, 4
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i8* %22)
  call void @exit(i32 1) #6
  unreachable

; <label>:24:                                     ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27) #7
  store i32 %28, i32* @nThreads, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %12, align 8
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 3
  %34 = load i8*, i8** %33, align 8
  store i8* %34, i8** %13, align 8
  %35 = load i8*, i8** %12, align 8
  %36 = call %struct._IO_FILE* @fopen(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store %struct._IO_FILE* %36, %struct._IO_FILE** %6, align 8
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %38 = icmp eq %struct._IO_FILE* %37, null
  br i1 %38, label %39, label %42

; <label>:39:                                     ; preds = %24
  %40 = load i8*, i8** %12, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i8* %40)
  call void @exit(i32 1) #6
  unreachable

; <label>:42:                                     ; preds = %24
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32* @numOptions)
  store i32 %44, i32* %11, align 4
  %45 = load i32, i32* %11, align 4
  %46 = icmp ne i32 %45, 1
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %42
  %48 = load i8*, i8** %12, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i32 0, i32 0), i8* %48)
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %51 = call i32 @fclose(%struct._IO_FILE* %50)
  call void @exit(i32 1) #6
  unreachable

; <label>:52:                                     ; preds = %42
  %53 = load i32, i32* @nThreads, align 4
  %54 = load i32, i32* @numOptions, align 4
  %55 = icmp sgt i32 %53, %54
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %52
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0))
  %58 = load i32, i32* @numOptions, align 4
  store i32 %58, i32* @nThreads, align 4
  br label %59

; <label>:59:                                     ; preds = %56, %52
  %60 = load i32, i32* @nThreads, align 4
  %61 = icmp ne i32 %60, 1
  br i1 %61, label %62, label %64

; <label>:62:                                     ; preds = %59
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

; <label>:64:                                     ; preds = %59
  %65 = load i32, i32* @numOptions, align 4
  %66 = sext i32 %65 to i64
  %67 = mul i64 %66, 36
  %68 = call noalias i8* @malloc(i64 %67) #5
  %69 = bitcast i8* %68 to %struct.OptionData_*
  store %struct.OptionData_* %69, %struct.OptionData_** @data, align 8
  %70 = load i32, i32* @numOptions, align 4
  %71 = sext i32 %70 to i64
  %72 = mul i64 %71, 4
  %73 = call noalias i8* @malloc(i64 %72) #5
  %74 = bitcast i8* %73 to float*
  store float* %74, float** @prices, align 8
  store i32 0, i32* %8, align 4
  br label %75

; <label>:75:                                     ; preds = %135, %64
  %76 = load i32, i32* %8, align 4
  %77 = load i32, i32* @numOptions, align 4
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %79, label %138

; <label>:79:                                     ; preds = %75
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %81 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %82 = load i32, i32* %8, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %81, i64 %83
  %85 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %84, i32 0, i32 0
  %86 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %87 = load i32, i32* %8, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %86, i64 %88
  %90 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %89, i32 0, i32 1
  %91 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %92 = load i32, i32* %8, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %91, i64 %93
  %95 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %94, i32 0, i32 2
  %96 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %97 = load i32, i32* %8, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %96, i64 %98
  %100 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %99, i32 0, i32 3
  %101 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %102 = load i32, i32* %8, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %101, i64 %103
  %105 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %104, i32 0, i32 4
  %106 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %107 = load i32, i32* %8, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %106, i64 %108
  %110 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %109, i32 0, i32 5
  %111 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %112 = load i32, i32* %8, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %111, i64 %113
  %115 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %114, i32 0, i32 6
  %116 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %117 = load i32, i32* %8, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %116, i64 %118
  %120 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %119, i32 0, i32 7
  %121 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %122 = load i32, i32* %8, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %121, i64 %123
  %125 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %124, i32 0, i32 8
  %126 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i32 0, i32 0), float* %85, float* %90, float* %95, float* %100, float* %105, float* %110, i8* %115, float* %120, float* %125)
  store i32 %126, i32* %11, align 4
  %127 = load i32, i32* %11, align 4
  %128 = icmp ne i32 %127, 9
  br i1 %128, label %129, label %134

; <label>:129:                                    ; preds = %79
  %130 = load i8*, i8** %12, align 8
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i32 0, i32 0), i8* %130)
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %133 = call i32 @fclose(%struct._IO_FILE* %132)
  call void @exit(i32 1) #6
  unreachable

; <label>:134:                                    ; preds = %79
  br label %135

; <label>:135:                                    ; preds = %134
  %136 = load i32, i32* %8, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %8, align 4
  br label %75

; <label>:138:                                    ; preds = %75
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %140 = call i32 @fclose(%struct._IO_FILE* %139)
  store i32 %140, i32* %11, align 4
  %141 = load i32, i32* %11, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %146

; <label>:143:                                    ; preds = %138
  %144 = load i8*, i8** %12, align 8
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i32 0, i32 0), i8* %144)
  call void @exit(i32 1) #6
  unreachable

; <label>:146:                                    ; preds = %138
  %147 = load i32, i32* @numOptions, align 4
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i32 0, i32 0), i32 %147)
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i32 0, i32 0), i32 100)
  %150 = load i32, i32* @numOptions, align 4
  %151 = mul nsw i32 5, %150
  %152 = sext i32 %151 to i64
  %153 = mul i64 %152, 4
  %154 = add i64 %153, 256
  %155 = call noalias i8* @malloc(i64 %154) #5
  %156 = bitcast i8* %155 to float*
  store float* %156, float** %9, align 8
  %157 = load float*, float** %9, align 8
  %158 = ptrtoint float* %157 to i64
  %159 = add i64 %158, 256
  %160 = and i64 %159, -64
  %161 = inttoptr i64 %160 to float*
  store float* %161, float** @sptprice, align 8
  %162 = load float*, float** @sptprice, align 8
  %163 = load i32, i32* @numOptions, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float, float* %162, i64 %164
  store float* %165, float** @strike, align 8
  %166 = load float*, float** @strike, align 8
  %167 = load i32, i32* @numOptions, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %166, i64 %168
  store float* %169, float** @rate, align 8
  %170 = load float*, float** @rate, align 8
  %171 = load i32, i32* @numOptions, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds float, float* %170, i64 %172
  store float* %173, float** @volatility, align 8
  %174 = load float*, float** @volatility, align 8
  %175 = load i32, i32* @numOptions, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %174, i64 %176
  store float* %177, float** @otime, align 8
  %178 = load i32, i32* @numOptions, align 4
  %179 = sext i32 %178 to i64
  %180 = mul i64 %179, 4
  %181 = add i64 %180, 256
  %182 = call noalias i8* @malloc(i64 %181) #5
  %183 = bitcast i8* %182 to i32*
  store i32* %183, i32** %10, align 8
  %184 = load i32*, i32** %10, align 8
  %185 = ptrtoint i32* %184 to i64
  %186 = add i64 %185, 256
  %187 = and i64 %186, -64
  %188 = inttoptr i64 %187 to i32*
  store i32* %188, i32** @otype, align 8
  store i32 0, i32* %7, align 4
  br label %189

; <label>:189:                                    ; preds = %258, %146
  %190 = load i32, i32* %7, align 4
  %191 = load i32, i32* @numOptions, align 4
  %192 = icmp slt i32 %190, %191
  br i1 %192, label %193, label %261

; <label>:193:                                    ; preds = %189
  %194 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %195 = load i32, i32* %7, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %194, i64 %196
  %198 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %197, i32 0, i32 6
  %199 = load i8, i8* %198, align 4
  %200 = sext i8 %199 to i32
  %201 = icmp eq i32 %200, 80
  %202 = zext i1 %201 to i64
  %203 = select i1 %201, i32 1, i32 0
  %204 = load i32*, i32** @otype, align 8
  %205 = load i32, i32* %7, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %204, i64 %206
  store i32 %203, i32* %207, align 4
  %208 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %209 = load i32, i32* %7, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %208, i64 %210
  %212 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %211, i32 0, i32 0
  %213 = load float, float* %212, align 4
  %214 = load float*, float** @sptprice, align 8
  %215 = load i32, i32* %7, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds float, float* %214, i64 %216
  store float %213, float* %217, align 4
  %218 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %219 = load i32, i32* %7, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %218, i64 %220
  %222 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %221, i32 0, i32 1
  %223 = load float, float* %222, align 4
  %224 = load float*, float** @strike, align 8
  %225 = load i32, i32* %7, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds float, float* %224, i64 %226
  store float %223, float* %227, align 4
  %228 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %229 = load i32, i32* %7, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %228, i64 %230
  %232 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %231, i32 0, i32 2
  %233 = load float, float* %232, align 4
  %234 = load float*, float** @rate, align 8
  %235 = load i32, i32* %7, align 4
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds float, float* %234, i64 %236
  store float %233, float* %237, align 4
  %238 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %239 = load i32, i32* %7, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %238, i64 %240
  %242 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %241, i32 0, i32 4
  %243 = load float, float* %242, align 4
  %244 = load float*, float** @volatility, align 8
  %245 = load i32, i32* %7, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds float, float* %244, i64 %246
  store float %243, float* %247, align 4
  %248 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %249 = load i32, i32* %7, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %248, i64 %250
  %252 = getelementptr inbounds %struct.OptionData_, %struct.OptionData_* %251, i32 0, i32 5
  %253 = load float, float* %252, align 4
  %254 = load float*, float** @otime, align 8
  %255 = load i32, i32* %7, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds float, float* %254, i64 %256
  store float %253, float* %257, align 4
  br label %258

; <label>:258:                                    ; preds = %193
  %259 = load i32, i32* %7, align 4
  %260 = add nsw i32 %259, 1
  store i32 %260, i32* %7, align 4
  br label %189

; <label>:261:                                    ; preds = %189
  %262 = load i32, i32* @numOptions, align 4
  %263 = sext i32 %262 to i64
  %264 = mul i64 %263, 40
  %265 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i32 0, i32 0), i64 %264)
  store i32 0, i32* %14, align 4
  %266 = bitcast i32* %14 to i8*
  %267 = call i32 @bs_thread(i8* %266)
  %268 = load i8*, i8** %13, align 8
  %269 = call %struct._IO_FILE* @fopen(i8* %268, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  store %struct._IO_FILE* %269, %struct._IO_FILE** %6, align 8
  %270 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %271 = icmp eq %struct._IO_FILE* %270, null
  br i1 %271, label %272, label %275

; <label>:272:                                    ; preds = %261
  %273 = load i8*, i8** %13, align 8
  %274 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i8* %273)
  call void @exit(i32 1) #6
  unreachable

; <label>:275:                                    ; preds = %261
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %277 = load i32, i32* @numOptions, align 4
  %278 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %276, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i32 %277)
  store i32 %278, i32* %11, align 4
  %279 = load i32, i32* %11, align 4
  %280 = icmp slt i32 %279, 0
  br i1 %280, label %281, label %286

; <label>:281:                                    ; preds = %275
  %282 = load i8*, i8** %13, align 8
  %283 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.15, i32 0, i32 0), i8* %282)
  %284 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %285 = call i32 @fclose(%struct._IO_FILE* %284)
  call void @exit(i32 1) #6
  unreachable

; <label>:286:                                    ; preds = %275
  store i32 0, i32* %7, align 4
  br label %287

; <label>:287:                                    ; preds = %308, %286
  %288 = load i32, i32* %7, align 4
  %289 = load i32, i32* @numOptions, align 4
  %290 = icmp slt i32 %288, %289
  br i1 %290, label %291, label %311

; <label>:291:                                    ; preds = %287
  %292 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %293 = load float*, float** @prices, align 8
  %294 = load i32, i32* %7, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds float, float* %293, i64 %295
  %297 = load float, float* %296, align 4
  %298 = fpext float %297 to double
  %299 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %292, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), double %298)
  store i32 %299, i32* %11, align 4
  %300 = load i32, i32* %11, align 4
  %301 = icmp slt i32 %300, 0
  br i1 %301, label %302, label %307

; <label>:302:                                    ; preds = %291
  %303 = load i8*, i8** %13, align 8
  %304 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.15, i32 0, i32 0), i8* %303)
  %305 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %306 = call i32 @fclose(%struct._IO_FILE* %305)
  call void @exit(i32 1) #6
  unreachable

; <label>:307:                                    ; preds = %291
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i32, i32* %7, align 4
  %310 = add nsw i32 %309, 1
  store i32 %310, i32* %7, align 4
  br label %287

; <label>:311:                                    ; preds = %287
  %312 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %313 = call i32 @fclose(%struct._IO_FILE* %312)
  store i32 %313, i32* %11, align 4
  %314 = load i32, i32* %11, align 4
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %319

; <label>:316:                                    ; preds = %311
  %317 = load i8*, i8** %13, align 8
  %318 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i32 0, i32 0), i8* %317)
  call void @exit(i32 1) #6
  unreachable

; <label>:319:                                    ; preds = %311
  %320 = load %struct.OptionData_*, %struct.OptionData_** @data, align 8
  %321 = bitcast %struct.OptionData_* %320 to i8*
  call void @free(i8* %321) #5
  %322 = load float*, float** @prices, align 8
  %323 = bitcast float* %322 to i8*
  call void @free(i8* %323) #5
  ret i32 0
}

declare i32 @printf(i8*, ...) #2

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #4

declare %struct._IO_FILE* @fopen(i8*, i8*) #2

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) #2

declare i32 @fclose(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind
declare void @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.1 (tags/RELEASE_601/final)"}
